---
import BaseHead from '../../components/site/BaseHead.astro'
import Header from '../../components/site/Header.astro'
import Footer from '../../components/site/Footer.astro'
import { SITE_DESCRIPTION } from '../../consts'
import { getCollection, type CollectionEntry } from 'astro:content'
import FormattedDate from '../../components/site/FormattedDate.astro'
import TagLink from '../../components/site/TagLink.astro'
import { Image } from 'astro:assets'

type Post = CollectionEntry<'blog'>

const posts = (await getCollection('blog')).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
)

const postByYear: {
  [year: number]: Post[]
} = {}

posts.forEach((post) => {
  const year = post.data.pubDate.getFullYear()
  if (!postByYear[year]) {
    postByYear[year] = []
  }
  postByYear[year].push(post)
})
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title="Blog | Soham Karandikar" description={SITE_DESCRIPTION} />
  </head>
  <body
    class="mx-auto my-4 w-full max-w-screen-md transition-colors duration-300 dark:bg-neutral-800 dark:text-neutral-300"
  >
    <Header />
    <main
      class="mx-auto my-4 flex w-full max-w-screen-md flex-col justify-center gap-4 px-4 sm:px-0"
    >
      {
        Object.keys(postByYear)
          .sort((a, b) => parseInt(b) - parseInt(a))
          .map((year) => (
            <div class="flex flex-col">
              <h2 class="mb-8 font-bold text-black dark:text-white">{year}</h2>
              <div class="flex flex-col gap-4">
                {postByYear[parseInt(year)].map((post: Post) => (
                  <div class="flex justify-between gap-2 border-b pb-4">
                    <div class="flex flex-col gap-4">
                      <FormattedDate date={post.data.pubDate} />
                      <a class="text-lg font-bold" href={`/blog/${post.slug}`}>
                        {post.data.title}
                      </a>
                      <div class="flex gap-2">
                        {post.data.tags?.map((i: string) => {
                          return <TagLink tag={i} />
                        })}
                      </div>
                    </div>
                    <a href={`/blog/${post.slug}`}>
                      <Image
                        src={post.data.heroImage as string}
                        alt=""
                        inferSize
                        class="h-24 w-40 border border-gray-200 bg-contain"
                      />
                    </a>
                  </div>
                ))}
              </div>
            </div>
          ))
      }
    </main>
    <Footer />
  </body>
</html>
